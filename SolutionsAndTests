function problem1(numbers)
{
	// safety checks, test for param null or not an array
	if(	numbers == null)
	{
		return 0;
	}
	if(!(Object.prototype.toString.call( numbers ) === '[object Array]' ))
	{
		return 0;
	}
	// loop every element
	var sum = 0;
	for(i = 0; i < numbers.length; i++)
	{
		if(numbers[i] % 2 == 1 || numbers[i] % 2 == -1)
		{
			// consider even numbers only
			sum += numbers[i];
		}
	}
	return sum;
}

function problem2(numbers)
{
	// safety checks, test for param null or not an array
	if(	numbers == null)
	{
		alert("problem1 ends-zero/null");
		return 0;
	}
	if(!(Object.prototype.toString.call( numbers ) === '[object Array]' ))
	{
		alert("problem1 ends-zero/noarray");
		return 0;
	}
	// init result array, [0]=biggest, [1]=2nd biggest
	var result = new Array();
	if(numbers.length >= 1)
	{
		result[0] = numbers[0];
		if(numbers.length >= 2)
		{
			result[1] = Number.MIN_SAFE_INTEGER;
		}
	}
	// loop every element
	for(i = 1; i < numbers.length; i++)
	{
		if(numbers[i] > result[1])
		{
			// bigger than 2nd last biggest found
			if(numbers[i] > result[0])
			{
				// bigger also than last biggest found, save previous biggest (as 2nd biggest), save current item (as new biggest)
				result[1] = result[0];
				result[0] = numbers[i];
			}
			else
			{
				// save over 2nd biggest
				result[1] = numbers[i];
			}
		}
	}
	return result;
}

function problem3(numbers)
{
	// safety checks, test for param null or not an array
	if(	numbers == null)
	{
		alert("problem1 ends-zero/null");
		return 0;
	}
	if(!(Object.prototype.toString.call( numbers ) === '[object Array]' ))
	{
		alert("problem1 ends-zero/noarray");
		return 0;
	}
	// init result
	var result = false;
	var n = numbers.length;
	// loop every element
	for(i = 0; i < n; i++)
	{
		var iteratingValue = numbers[i]; // take the value
		// if the value was previously altered, obtain original value
		var consideredValue = iteratingValue;
		if(iteratingValue > n)
		{
			consideredValue = iteratingValue % n
		}
		// use the value as an index
		// check if the item at desired index was already altered
		//alert("consideredValue=" + consideredValue)
		if(numbers[consideredValue-1] <= n)
		{
			// if was not previously altered, increase now that item
			//alert("numbers[" + consideredValue + "-1] += " + n + " is normal");
			numbers[consideredValue-1] += n;
		}
		else
		{
			// there was a previous item which pointed at same index, as this value is already altered
			//alert("numbers[" + consideredValue + "-1]==" + numbers[consideredValue-1] + " so we found")
			result = true;
			break;
		}
	}
	return result;
}

function testProblem1()
{
	var moreEvens = [1, 2, 3]
	var moreEvensResponse = problem1(moreEvens);
	if (moreEvensResponse != 4)
	{
		//alert("moreEvens=>" + moreEvensResponse);
		return false;
	}
	var lessEvens = [2, 3, 4]
	var lessEvensResponse = problem1(lessEvens);
	if (lessEvensResponse != 3)
	{
		//alert("lessEvens=>" + lessEvensResponse);
		return false;
	}
	var withNegatives = [-2, -1, 0]
	var withNegativesResponse = problem1(withNegatives);
	if (withNegativesResponse != -1)
	{
		//alert("withNegatives=>" + withNegativesResponse);
		return false;
	}
	var repeating = [1, 1, 2, 2, 1, 2]
	var repeatingResponse = problem1(repeating);
	if (repeatingResponse != 3)
	{
		//alert("repeating=>" + repeatingResponse);
		return false;
	}
	return true;
}

function testProblem2()
{
	var simpleArray1 = [1, 2, 3, 4]
	var simpleArray1Response = problem2(simpleArray1);
	if(!(Object.prototype.toString.call( simpleArray1Response ) === '[object Array]' ))
	{
		//alert("simpleArray1=>" + simpleArray1Response);
		return false;
	}
	if (simpleArray1Response.length != 2)
	{
		//alert("simpleArray1=>" + simpleArray1Response);
		return false;
	}
	if (simpleArray1Response[0] != 4 || simpleArray1Response[1] != 3)
	{
		//alert("simpleArray1=>" + simpleArray1Response);
		return false;
	}
	
	var simpleArray2 = [4, 3, 2, 1]
	var simpleArray2Response = problem2(simpleArray2);
	if(!(Object.prototype.toString.call( simpleArray2Response ) === '[object Array]' ))
	{
		//alert("simpleArray1=>" + simpleArray2Response);
		return false;
	}
	if (simpleArray2Response.length != 2)
	{
		//alert("simpleArray1=>" + simpleArray2Response);
		return false;
	}
	if (simpleArray2Response[0] != 4 || simpleArray2Response[1] != 3)
	{
		//alert("simpleArray1=>" + simpleArray2Response);
		return false;
	}
	
	var oneElementArray = [1]
	var oneElementArrayResponse = problem2(oneElementArray);
	if(!(Object.prototype.toString.call( oneElementArrayResponse ) === '[object Array]' ))
	{
		//alert("simpleArray1=>" + oneElementArrayResponse);
		return false;
	}
	if (oneElementArrayResponse.length != 1)
	{
		//alert("simpleArray1=>" + oneElementArrayResponse);
		return false;
	}
	if (oneElementArrayResponse[0] != 1)
	{
		//alert("simpleArray1=>" + oneElementArrayResponse);
		return false;
	}
	return true;
}


function testProblem3()
{
	var simpleArray1 = [1, 2, 3, 4]
	var simpleArray1Response = problem3(simpleArray1);
	if(simpleArray1Response != false)
	{
		//alert("simpleArray1=>" + simpleArray1Response);
		return false;
	}
	
	var simpleArray2 = [4, 3, 2, 1]
	var simpleArray2Response = problem3(simpleArray2);
	if(simpleArray2Response != false)
	{
		//alert("simpleArray1=>" + simpleArray2Response);
		return false;
	}
	
	var duplicatesArray1 = [1, 2, 3, 1]
	var duplicatesArray1Response = problem3(duplicatesArray1);
	if(duplicatesArray1Response != true)
	{
		//alert("simpleArray1=>" + duplicatesArray1Response);
		return false;
	}
	
	var duplicatesArray2 = [4, 2, 3, 4]
	var duplicatesArray2Response = problem3(duplicatesArray2);
	if(duplicatesArray2Response != true)
	{
		//alert("simpleArray1=>" + duplicatesArray2Response);
		return false;
	}
	
	var duplicatesArray3 = [2, 1, 2, 4]
	var duplicatesArray3Response = problem3(duplicatesArray3);
	if(duplicatesArray3Response != true)
	{
		//alert("simpleArray1=>" + duplicatesArray3Response);
		return false;
	}
	
	var duplicatesArray4 = [1, 2, 3, 2]
	var duplicatesArray4Response = problem3(duplicatesArray4);
	if(duplicatesArray4Response != true)
	{
		//alert("simpleArray1=>" + duplicatesArray4Response);
		return false;
	}
	return true;
}
